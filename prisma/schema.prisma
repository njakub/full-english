// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Place {
    id       Int     @id @default(autoincrement())
    googleId String  @unique
    name     String
    address  String
    rating   Float?
    googleRating  Float
    image    String?
    reviews  Review[]
}

model Item {
  id       Int     @id @default(autoincrement())
  name     String
  rating   Float
  type     String
  comment  String?
  Review   Review  @relation(fields: [reviewId], references: [id])
  reviewId Int
}

model Review {
  id      Int      @id @default(autoincrement())
  comment String?
  rating  Float
  items   Item[]
  User    User     @relation(fields: [userId], references: [id])
  userId  String
  type    String
  date    DateTime @default(now())
  place   Place    @relation(fields: [placeId], references: [id])
  placeId Int
  imageId String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
